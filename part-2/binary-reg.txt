ESEUR Workshop - Binary/proportional data
=========================================
:author:    Derek M. Jones
:copyright: Somebody
:backend:   slidy
:max-width: 45em

Response variable bounded by 0/1
---------------------------------

{nbsp}

Possible response values are:

* binary: 0/1, yes/no
* a proportion: value between 0..1

Binary response data
--------------------

.Modeling 0/1 data with a straight line and logistic equation.
[caption="Figure ", label=binomial-data]
image::binary-reg-binomial-data.jpg[]


rexample[binomial-data.R]

Modeling binary data
--------------------

{nbsp}

[source,R]
-----
# default
# b_sl=glm(y ~ x, data=answer, family=gaussian)

b_sl=glm(y ~ x, data=answer, family=binomial)

pred=predict(b_sl, type="response")
-----

0/1 cutoff value
----------------

{nbsp}

rfunc[predict] returns values in the range 0..1

Dividing line between 0/1 chosen by developer

{nbsp}

----
    1   1.1   1.2   1.3   1.4   1.5   1.6   1.7 
0.047 0.062 0.080 0.104 0.133 0.169 0.212 0.262 
  1.8   1.9     2   2.1   2.2   2.3   2.4   2.5 
0.320 0.384 0.452 0.522 0.592 0.657 0.718 0.771 
  2.6   2.7   2.8   2.9 
0.817 0.855 0.887 0.912 
----

Intermittent faults in Firefox
------------------------------

{nbsp}

----
  cpu_speed memory disk_size f_124750 f_380417 f_396863
1     0.667  0.128       2.5        4       10        5
2     0.667  0.256      10.0        4        8        6
3     0.667  1.000       2.5        4        7        4
4     1.000  0.128      10.0        3       10        6
5     1.000  0.256       2.5        3        9        6
6     1.000  1.000      10.0        2        9        5
7     2.000  0.128       2.5        0       10        6
8     2.000  0.256      10.0        2        8        7
9     2.000  1.000      10.0        1        7        5
----

Maths behind the model
----------------------

{nbsp}

<equ>\log\frac{p}{q} = \alpha + \beta x</equ>

<equ>p</equ> proportion of successes, <equ>q</equ> proportion of failures

<equ>p = \frac{e^{\alpha+\beta x}}{1+e^{\alpha+\beta x}}</equ>

{nbsp}

<equ>y = \alpha + \beta_1 x_1 + \beta_2 x_2 + \cdots + \beta_n x_n + \epsilon</equ>

<equ>g(y) = \alpha + \beta_1 x_1 + \beta_2 x_2 + \cdots + \beta_n x_n + \epsilon</equ>

<equ>g()</equ> known as the 'link function'

Transforming the response
-------------------------

[source,R]
-----
# pred=predict(b_sl, type="link")

pred=predict(b_sl, type="response")
-----

----
Call:
glm(formula = y ~ x, family = binomial, data = answer)

Deviance Residuals: 
     Min        1Q    Median        3Q       Max  
-2.09579  -0.10245  -0.00077   0.15023   1.82971  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)   
(Intercept)   -7.212      2.702  -2.669  0.00760 **
x              4.070      1.416   2.874  0.00406 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 55.452  on 39  degrees of freedom
Residual deviance: 10.686  on 38  degrees of freedom
AIC: 14.686

Number of Fisher Scoring iterations: 7
----

rexample[binomial-summ.R]

Proportional response data
--------------------------

{nbsp}

Sample includes failures+successes of response variable

[source,R]
-----
y=cbind(fail_count, 10-fail_count)

b_mod=glm(y ~ (cpu_speed+memory+disk_size)^3, data=ff_data,
                                             family=binomial)
-----

Data to try
-----------

-----
fuzzer.csv.xz
prog_len.csv.xz
-----

[source,R]
-----
library("plyr")

prog_len=function(df)
{
df$prog_len=prog_lang_len[unique(df$program), unique(df$language)]
return(df)
}

fuzz=read.csv("fuzzer.csv.xz", as.is=TRUE)
prog_lang_len=read.csv("prog_len.csv.xz", as.is=TRUE, row.names=1)

# comp_status -- compiled OK
# run_status  -- executed without aborting
# out_status  -- output as expected

# language  -- source language
# operation -- fuzzing operation performed
# prog_len  -- LOC (lines of code)
                
fuzz=ddply(fuzz, .(program, language), prog_len)

comp_fuzz=subset(fuzz, fuzz_status == "OK")

y=cbind(..., ...)
comp_mod=glm(y ~ ..., data=..., family=...)
-----
